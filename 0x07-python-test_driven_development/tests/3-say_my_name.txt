Doctest: 3-say_my_name.py module
======================


Using ''say_my_name''
**********************

This is a Doctest for the say_my_name function in 3-say_my_name.py module.

- First:

	*******************
	# import ''say_my_name'':
	*******************
	--------------------------------------------------
    - # import ''say_my_name'' function from the ''3-say_my_name.py'' module:
    >>> say_my_name = __import__('3-say_my_name').say_my_name

	--------------------------------------------------

- Now use it:

	*******************
	# Correct use:
	*******************

	--------------------------------------------------
	- Correct use: Pass two arguments.

    >>> say_my_name("Jordan", "Bonnett")
    My name is Jordan Bonnett

	--------------------------------------------------
	- Correct use: Pass one argument.

    >>> say_my_name("Jordan")
    My name is Jordan 

	--------------------------------------------------
	--------------------------------------------------

	*******************
	# Wrong use and Raise Errors:
	*******************

	--------------------------------------------------
    - Wrong use: Pass no arguments.	

    >>> say_my_name()
    Traceback (most recent call last):
        ...
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

	--------------------------------------------------
    - Wrong use: Pass three arguments.	

    >>> say_my_name("Jordan", "Bonnett", "Gomez")
    Traceback (most recent call last):
        ...
    TypeError: say_my_name() takes from 1 to 2 positional arguments but 3 were given

	--------------------------------------------------
	- Raise Error: TypeError: Wrong type first_name.

    >>> try:
    ...     say_my_name(123, "Bonnett")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] first_name must be a string

	--------------------------------------------------
	- Raise Error: TypeError: Wrong type last_name.

    >>> try:
    ...     say_my_name("Jordan", 123)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] last_name must be a string

	--------------------------------------------------
	- Raise Error: TypeError: Name None.

    >>> try:
    ...     say_my_name(None, "Bonnett")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] first_name must be a string
