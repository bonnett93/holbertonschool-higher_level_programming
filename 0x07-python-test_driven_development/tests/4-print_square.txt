Doctest: 4-print_square.py module
======================


Using ''print_square''
**********************

This is a Doctest for the print_square function in 4-print_square.py module.

- First:

	*******************
	# import ''print_square'':
	*******************
	--------------------------------------------------
    - # import ''print_square'' function from the ''4-print_square.py'' module:
    >>> print_square = __import__('4-print_square').print_square

	--------------------------------------------------

- Now use it:

	*******************
	# Correct use:
	*******************

	--------------------------------------------------
	- Correct use: One argument.

    >>> print_square(5)
    #####
    #####
    #####
    #####
    #####

	--------------------------------------------------
	- Correct use: One argument size = 0.

    >>> print_square(0)
    <BLANKLINE>

	--------------------------------------------------

	*******************
	# Wrong use and Raise Errors:
	*******************

	--------------------------------------------------
    - Wrong use: Pass no arguments.	

    >>> print_square()
    Traceback (most recent call last):
        ...
    TypeError: print_square() missing 1 required positional argument: 'size'

	--------------------------------------------------
    - Wrong use: Pass two arguments.	

    >>> print_square(5, 5)
    Traceback (most recent call last):
        ...
    TypeError: print_square() takes 1 positional argument but 2 were given

	--------------------------------------------------
	- Raise Error: TypeError: Wrong type size

    >>> try:
    ...     print_square("five")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] size must be an integer

	--------------------------------------------------
	- Raise Error: ValueError: Size < 0.

    >>> try:
    ...     print_square(-4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] size must be >= 0

	--------------------------------------------------
	- Raise Error: TypeError: None.

    >>> try:
    ...     print_square(None)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] size must be an integer
