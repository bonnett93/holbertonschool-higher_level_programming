Doctest: 1-my_list.py module
======================


Using ''Mylist''
**********************

This is a Doctest for the Mylist Class in 1-my_list.y module.

- First:

	*******************
	# import ''Mylist'' Class from the ''1-my_list.py'' module:
	*******************

    >>> Mylist = __import__('1-my_list').MyList


- Now use it:

	*******************
	# No error testing:
	*******************

	--------------------------------------------------
	- Create instance: Correct mode with no arguments.

    >>> my_list = Mylist()
	>>> print(my_list)
	[]

	--------------------------------------------------
	- Create instance: Correct mode with argument type list.

    >>>	a_list = Mylist([-1, 3, 2, 5])
	>>> print(a_list)
	[-1, 3, 2, 5]

	--------------------------------------------------
	- Type of instance:

	>>> print(my_list.__class__.__name__)
	MyList

	--------------------------------------------------
	- Method print_sorted() empty list:

	>>> my_list = Mylist()
	>>> my_list.print_sorted()
	[]

	--------------------------------------------------
	- Method append:

	>>> my_list.append(1)
	>>> my_list.append(4)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> my_list.append(5)
	>>> print(my_list)
	[1, 4, 2, 3, 5]

	--------------------------------------------------
	- Method print_sorted() not empty list:

	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5]

	--------------------------------------------------

	*******************
	# Error testing:
	*******************

	- Create instance: Incorrect mode with arguments of non type list.

    >>>	my_list = Mylist(1)
    Traceback (most recent call last):
      File "/usr/lib/python3.4/doctest.py", line 1318, in __run
        compileflags, 1), test.globs)
      File "<doctest 1-my_list.txt[15]>", line 1, in <module>
        my_list = Mylist(1)
    TypeError: 'int' object is not iterable

	
