Doctest: 7-base_geometry.py module
======================


Using ''BaseGeometry''
**********************

This is a Doctest for the BaseGeometry Class in 7-base_geometry.py module.

- First:

	*******************
	# import ''BaseGeometry'':
	*******************
	--------------------------------------------------
    - # import ''BaseGeometry'' Class from the ''7-base_geometry'' module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

	--------------------------------------------------

- Now use it:

	*******************
	# Create instance:
	*******************

	--------------------------------------------------
	- Create instance: Correct mode with no arguments.

    >>> bg = BaseGeometry()

	--------------------------------------------------
	- Create instance: Incorrect mode with arguments any type.

    >>>	bg = BaseGeometry(5)
    Traceback (most recent call last):
    ...
    TypeError: object() takes no parameters

	--------------------------------------------------

	*******************
	# Type of instance::
	*******************

	--------------------------------------------------
	- Type of instance:

	>>> print(bg.__class__.__name__)
	BaseGeometry

	--------------------------------------------------

	*******************
	# Method area():
	*******************

	--------------------------------------------------
	- Try Method: area():

    >>> try:
    ...     bg.area()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [Exception] area() is not implemented

	--------------------------------------------------

	*******************
	# Method integer_validator():
	*******************

	--------------------------------------------------
    - Method integer_validator(): No parameters

    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

	--------------------------------------------------
    - Method integer_validator(): One parameter

    >>> bg.integer_validator("name")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

	--------------------------------------------------
    - Method integer_validator(): Two correct parameters

    >>> bg.integer_validator("name", 2)

	--------------------------------------------------
    - Method integer_validator(): Two parameters, value attribute TypeError
        string:

    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

	--------------------------------------------------
    - Method integer_validator(): Two parameters, value attribute TypeError
        bool:

    >>> try:
    ...     bg.integer_validator("name", True)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

	--------------------------------------------------
    - Method integer_validator(): Two parameters, value attribute == 0:

    >>> try:
    ...     bg.integer_validator("name", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] name must be greater than 0

	--------------------------------------------------
    - Method integer_validator(): Two parameters, value attribute < 0:

    >>> try:
    ...     bg.integer_validator("name", -3)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] name must be greater than 0

	--------------------------------------------------

